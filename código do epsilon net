import numpy as np
from scipy.optimize import minimize
from itertools import combinations

def gerar_epsilon_net(limite_inferior, limite_superior, epsilon, n_dim):
    """
    Gera um epsilon-net (rede \varepsilon) para o domínio definido pelos limites.

    Parâmetros:
      - limite_inferior: Limite inferior do domínio (escalares ou array de tamanho n_dim)
      - limite_superior: Limite superior do domínio (escalares ou array de tamanho n_dim)
      - epsilon: Espaçamento desejado entre os pontos da rede
      - n_dim: Número de dimensões

    Retorna:
      - rede: Um array 2D onde cada linha é um ponto do epsilon-net
    """
    #se os lim são escalares, converte para arrays de tamanho n_dim
    if np.isscalar(limite_inferior):
        limite_inferior = np.full(n_dim, limite_inferior)
    if np.isscalar(limite_superior):
        limite_superior = np.full(n_dim, limite_superior)
    
    #gera uma lista de arrays 1D para cada dimensão com espaçamento ε
    grids = []
    for dim in range(n_dim):
        grids.append(np.arange(limite_inferior[dim], limite_superior[dim] + epsilon, epsilon))
    
    #cria a malha multidimensional e reorganiza em um array 2D
    mesh = np.meshgrid(*grids, indexing='ij')
    rede = np.stack(mesh, axis=-1).reshape(-1, n_dim)
    return rede

def cluster_minimos(minimos, threshold):
    """
    Agrupa (clusteriza) os mínimos locais obtidos a partir das otimizações.

    Parâmetros:
      - minimos: Array contendo os mínimos (cada linha um ponto)
      - threshold: Distância máxima para considerar dois mínimos iguais

    Retorna:
      - clusters: Array com os centros (médias) dos clusters, representando os mínimos locais distintos
    """
    clusters = []
    visited = np.zeros(len(minimos), dtype=bool)
    
    for i in range(len(minimos)):
        if not visited[i]:
            cluster = [minimos[i]]
            visited[i] = True
            for j in range(i+1, len(minimos)):
                if not visited[j] and np.linalg.norm(minimos[i] - minimos[j]) < threshold:
                    cluster.append(minimos[j])
                    visited[j] = True
            clusters.append(np.mean(cluster, axis=0))
    return np.array(clusters)

def adaptive_epsilon_net(domain_lower, domain_upper, f, grad_f, n_dim, 
                           epsilon_inicial=1.0, coarse_grid_epsilon=1.0,
                           tol_epsilon=1e-16, max_iter=1000):
    """
    Ajusta adaptativamente o valor de \(\varepsilon\) baseado na separação dos mínimos locais.
    
    Parâmetros:
      - domain_lower: Limite inferior do domínio (escalares ou array de tamanho n_dim)
      - domain_upper: Limite superior do domínio (escalares ou array de tamanho n_dim)
      - f: Função objetivo a ser minimizada (recebe array n_dim)
      - grad_f: Gradiente da função f (recebe array n_dim)
      - n_dim: Número de dimensões do domínio
      - epsilon_inicial: Valor inicial de \(\varepsilon\) para clusterização
      - coarse_grid_epsilon: Espaçamento usado para gerar a malha inicial (pode ser grosseiro)
      - tol_epsilon: Tolerância para convergência do \(\varepsilon\)
      - max_iter: Número máximo de iterações para ajuste
      
    Retorna:
      - epsilon_final: Valor final ajustado de \(\varepsilon\)
      - clusters: Mínimos locais distintos encontrados (centros dos clusters)
    """
    epsilon = epsilon_inicial
    for it in range(max_iter):
        #gera uma malha no domínio usando um espaçamento grosseiro
        pontos = gerar_epsilon_net(domain_lower, domain_upper, coarse_grid_epsilon, n_dim)
        
        #executa otimização (BFGS) a partir de cada ponto da malha
        minimos = []
        for x0 in pontos:
            res = minimize(f, x0, method='BFGS', jac=grad_f, options={'gtol':1e-6, 'disp': False})
            minimos.append(res.x)
        minimos = np.array(minimos)
        
        #clusteriza os mínimos usando o ε atual como threshold
        clusters = cluster_minimos(minimos, threshold=epsilon)
        
        #calcula a menor distância entre os mínimos distintos
        if len(clusters) > 1:
            dists = [np.linalg.norm(c1 - c2) for c1, c2 in combinations(clusters, 2)]
            min_dist = min(dists)
        else:
            min_dist = coarse_grid_epsilon * 10  #valor arbitrário se houver apenas um mínimo
        
        #atualiza \(\varepsilon\) como metade da menor distância entre mínimos distintos
        novo_epsilon = min_dist / 2.0
        print(f"Iteração {it+1}: {len(clusters)} mínimos distintos, min_dist = {min_dist:.4f}, novo epsilon = {novo_epsilon:.4f}")
        
        #verifica se a mudança em epsilon é pequena o suficiente para convergência
        if abs(novo_epsilon - epsilon) < tol_epsilon:
            epsilon = novo_epsilon
            break
        epsilon = novo_epsilon
        
    return epsilon, clusters

#exemplo de função n-dimensional e seu gradiente
def f_n_dim(x):
    """
    Exemplo de função em n dimensões:
    f(x) = ||x||^2 + 10*sin(||x||)
    Onde ||x|| é a norma Euclidiana de x.
    """
    norm_x = np.linalg.norm(x)
    return norm_x**2 + 10 * np.sin(norm_x)

def grad_f_n_dim(x):
    """
    Gradiente de f_n_dim.
    Derivada de ||x||^2 é 2x e a derivada de 10*sin(||x||) é 10*cos(||x||)*(x/||x||).
    """
    norm_x = np.linalg.norm(x)
    if norm_x == 0:
        return np.zeros_like(x)
    return 2 * x + 10 * np.cos(norm_x) * (x / norm_x)

if __name__ == '__main__':
    #definição do domínio em n dimensões
    n_dim = 3
    domain_lower = -10 * np.ones(n_dim)  # Ex: [-10, -10, -10]
    domain_upper = 10 * np.ones(n_dim)   # Ex: [10, 10, 10]
    
    #parâmetros para a adaptação de ε
    epsilon_inicial = 1.0
    coarse_grid_epsilon = 2.0  # Pode ser ajustado conforme o domínio
    
    #executa a estratégia adaptativa para determinar epsilon e identificar mínimos locais
    epsilon_final, clusters = adaptive_epsilon_net(domain_lower, domain_upper, 
                                                    f_n_dim, grad_f_n_dim, n_dim,
                                                    epsilon_inicial, coarse_grid_epsilon)
    
    print("\nEpsilon final ajustado:", epsilon_final)
    print("Mínimos locais distintos encontrados:")
    print(clusters)
