import numpy as np
import math

def d2(vc, i, j):
    return np.sum((vc[i] - vc[j])**2)

def calcular_d2(n, i, j):
    if n == 3:
        return 1
    elif n == 4:
        if abs(i - j) == 2:
            return math.sqrt(2)**2
        else:
            return 1

def funcao(vc, segmentos):
    soma = 0
    for p in segmentos:
        i = p[0]
        j = p[1]
        d2_valor = p[2]
        soma += (d2(vc, i, j) - d2_valor)**2
    return soma

def calcular_incidencias(num_de_vertices, segmentos):
    incidencias = [[] for _ in range(num_de_vertices)]
    for idx, (i, j, _) in enumerate(segmentos):
        incidencias[i].append(idx)
        incidencias[j].append(idx)
    return incidencias

def gradiente(vc, segmentos, incidencias):
    n = len(vc)
    grad = np.zeros_like(vc)
    for idx, (i, j, d2_valor) in enumerate(segmentos):
        dist = np.sqrt(d2(vc, i, j))
        if dist == 0:  # Para evitar divisão por zero
            continue
        grad[i] += 2 * (dist - math.sqrt(d2_valor)) * (vc[i] - vc[j]) / dist
        grad[j] += 2 * (dist - math.sqrt(d2_valor)) * (vc[j] - vc[i]) / dist
    return grad

def main():
    num_de_vertices = 8
    vc = np.random.uniform(-1, 1, (num_de_vertices, 3))
    faces = [[0,1,2],[0,2,3],[0,1,3],[1,2,6,5],[1,3,4,6],[2,3,5,4],[6,5,7],[5,4,7],[4,6,7]]
    segmentos = []
    for f in faces:
        n = len(f)
        for i in range(n):
            for j in range(i + 1, n):
                d2_valor = calcular_d2(n, f[i], f[j])
                segmentos.append([f[i], f[j], d2_valor])

    print("Listas antes do gradiente:")
    print("Vértices:")
    print(vc)

    valor_da_funcao = funcao(vc, segmentos)
    print("\nValor da função antes da otimização:", valor_da_funcao)

    incidencias = calcular_incidencias(num_de_vertices, segmentos)

    alpha = 0.01  # Taxa de aprendizado inicial
    friction_coeff = 0.01  # Coeficiente de atrito
    tolerance = 1e-16
    max_iterations = 100000

    velocity = np.zeros_like(vc)

    for i in range(max_iterations):
        grad_atual = gradiente(vc, segmentos, incidencias)
        norma_grad = np.linalg.norm(grad_atual)

        if norma_grad < tolerance:
            break

        velocity -= alpha * grad_atual
        velocity *= (1 - friction_coeff)  # Aplicação da força de atrito

        vc += velocity

        if i % 100 == 0:
            valor_da_funcao = funcao(vc, segmentos)
            print("\nIteração", i + 1, " - Valor da função:", valor_da_funcao)
            print("Vértices otimizados:")
            for idx, point in enumerate(vc):
                print(f"Ponto {idx}: {point}")

    print("\nVértices otimizados:")
    for idx, point in enumerate(vc):
        print(f"Ponto {idx}: {point}")

if __name__ == '__main__':
    main()
