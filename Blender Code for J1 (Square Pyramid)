import bpy  

import numpy as np
import math

def atualizar_objeto(vertices, edges, faces):
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete()
    info_objeto = bpy.data.meshes.new('info')
    objeto = bpy.data.objects.new('piramide', info_objeto)
    bpy.context.scene.collection.objects.link(objeto)
    bpy.context.view_layer.objects.active = objeto
    bpy.context.active_object.select_set(state=True)
    info_objeto.from_pydata(vertices,edges,faces)
    info_objeto.update()
    bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)



def d2(vc, i, j):
    return np.sum((vc[i] - vc[j])**2)

def calcular_d2(n, i, j):
    if n == 3:
        return 1
    
    elif n == 4:
        if abs(i - j) == 2:
            return math.sqrt(2)**2
        else:
            return 1
        
    elif n == 5:
        if abs(i - j) == 3:
            return ((1+math.sqrt(5))/2)**2
        if abs(i - j) == 2:
            return ((1+math.sqrt(5))/2)**2
        else:
            return 1
        
    elif n == 6:
        if abs(i-j) == 3:
            return (math.sqrt(3))**2
        if abs(i-j) == 2:
            return 4
        else:
            return 1
        
    elif n == 8:
        if abs(i-j) == 4:
            return (1/math.sqrt(1/2 - math.sqrt(2)/4))**2
        if abs(i-j) == 3:
            return (math.sqrt(math.sqrt(2)/4 + 1/2)/math.sqrt(1/2 - math.sqrt(2)/4))**2
        if abs(i-j) == 2:
            return (math.sqrt(2)/(2*math.sqrt(1/2 - math.sqrt(2)/4)))**2
        else:
            return 1
        
    elif n == 10:
        if abs(i-j) == 5:
            return (2/(-1/2 + math.sqrt(5)/2))**2
        if abs(i-j) == 4:
            return (2*math.sqrt(math.sqrt(5)/8 + 5/8)/(-1/2 + math.sqrt(5)/2))**2
        if abs(i-j) == 3:
            return (2*(1/4 + math.sqrt(5)/4)/(-1/2 + math.sqrt(5)/2))**2
        if abs(i-j) == 2:
            return (2*math.sqrt(5/8 - math.sqrt(5)/8)/(-1/2 + math.sqrt(5)/2))**2
        else:
            return 1
        
def funcao(vc, segmentos):
    soma = 0
    for p in segmentos:
        i = p[0]
        j = p[1]
        d2_valor = p[2]
        soma += (d2(vc, i, j) - d2_valor)**2
    return soma

def calcular_incidencias(num_de_vertices, segmentos):
    incidencias = [[] for _ in range(num_de_vertices)]
    for idx, (i, j, _) in enumerate(segmentos):
        incidencias[i].append(idx)
        incidencias[j].append(idx)
    return incidencias

def gradiente(vc, segmentos, incidencias):
    n = len(vc)
    grad = np.zeros_like(vc)
    for idx, (i, j, d2_valor) in enumerate(segmentos):
        dist = np.sqrt(d2(vc, i, j))
        if dist == 0:  # Para evitar divisão por zero
            continue
        grad[i] += 2 * (dist - math.sqrt(d2_valor)) * (vc[i] - vc[j]) / dist
        grad[j] += 2 * (dist - math.sqrt(d2_valor)) * (vc[j] - vc[i]) / dist
    return grad

#def main():
edges = []
num_de_vertices = 5
vc = np.random.uniform(-1, 1, (num_de_vertices, 3))
faces =[[0,1,4],[0,3,4],[1,2,4],[2,3,4],[0,1,2,3]]
segmentos = []
for f in faces:
    n = len(f)
    for i in range(n):
        for j in range(i + 1, n):
            d2_valor = calcular_d2(n, f[i], f[j])
            segmentos.append([f[i], f[j], d2_valor])

print("Listas antes do gradiente:")
print("Vértices:")
print(vc)

valor_da_funcao = funcao(vc, segmentos)
print("\nValor da função antes da otimização:", valor_da_funcao)

incidencias = calcular_incidencias(num_de_vertices, segmentos)

alpha = 0.01  # Taxa de aprendizado inicial
friction_coeff = 0.01  # Coeficiente de atrito
tolerance = 1e-5
max_iterations = 10000

velocity = np.zeros_like(vc)

norma_grad = 1.0
i = 0
while (norma_grad > tolerance) and (i < max_iterations):
    i = i + 1
    grad_atual = gradiente(vc, segmentos, incidencias)
    norma_grad = np.linalg.norm(grad_atual)


    velocity -= alpha * grad_atual
    velocity *= (1 - friction_coeff)  # Aplicação da força de atrito

    vc += velocity
    
    atualizar_objeto(vc, edges, faces)
    
